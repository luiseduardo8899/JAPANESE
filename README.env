##If the server does not have python3 install it ##
0. Install python3:
#> sudo apt install python3

0.1. Install pip3:
#> sudo apt install pip3

may need to upgrade after installing:
#> pip install --upgrade pip

# The following section of this README.env is based on Jeff Knup's post on starting a Django project ( Tweaked for Python3 )
# https://jeffknupp.com/blog/2013/12/18/starting-a-django-16-project-the-right-way/

1. Virtual ENV Wrapper ( for Python 3 ) :

a. Install Python3 Virtual Env
#> sudo pip3 install virtualenvwrapper

It gets installed here:
/usr/local/lib/python3.5/dist-packages/

b. After it's installed, add the following lines to your shell's start-up file (.zshrc, .bashrc, .profile, etc).

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 ( * Important * )
export WORKON_HOME=$HOME/.virtualenvs ( this could actually contain python3 or python2 envs )
export PROJECT_HOME=$HOME/JP_APP
source /usr/local/bin/virtualenvwrapper.sh 

c. source ~/.bashrc

2. Make Virtual Env Project
a.
#> mkvirtualenv japan_project -p /usr/bin/python3

NOTE: you're using a virtualenv instead of your system's Python installation. (Check Python version)


b. To exit the project:
#> deactivate

To return to project: 
#> workon japan_project


3. Installing DJANGO itself:
a.
#> pip3 install django

b. Confirm version:
#> which django-admin.py

It should be pointing to  the project directory in the created virtual environment, i.e :
/home/luis/.virtualenvs/japan_project/bin/django-admin.py

4. Setting up the project: 

#> django-admin.py startproject japan_project

This will create the japan_project/japan_project directory, with default files to be used.

4.1. Add an application: 

#> python manage.py startapp dictionary

5.  Commit to repository ( currently using GIT )

#> git add japan_project
#> git add README.env 
#> git commit -m 'Initial commit of Japan project'


6. Setup SOUTH for Database Migration ( thank yourself later )

a. Install : 
#> pip3 install south

NOTE: We setup South by adding it to our INSTALLED_APPS in the settings.py file for the project.

b. Migrate models:
Migrate your models to South once you are confident they may not change much in the near term.

#> ./manage.py convert_to_south <app_name>

7. Use Fabric for Deployment
a. Install : 
#> pip install fabric

b. Create fabfile.py in project root directory, and add contents:
| from fabric.api import local
| 
| def prepare_deployment(branch_name):
|     local('python manage.py test japan_project')
|     local('git add -p && git commit') # or local('hg add && hg commit')

"NOTE: that the code above assumes you're developing on the same machine you deploy on. If that's not the case, the file would be mostly the same but would use Fabric's run function instead of local. See the Fabric documentation for details."

c. Deploy server: 
#> fab prepare_deployment
#> fab deploy


8. Unit testing :  Use Django's Testcase ' :

. You would put this code in a file called test_<appname>.py and place it in 
the same directory as the app it is testing. 
. To run the tests for an app, simply run 
#> ./manage.py test <appname>. 

. The fabfile we created already knows to run the tests before deployment, so no need to make any other changes.

|  import datetime
|  
|  from django.test import TestCase
|  from myapp.models import Post
|  
|  class BlogPostTestCase(TestCase):
|      def setUp(self):
|          Post.objects.create(id=1, 
|              title='Starting a Django 1.6 Project the Right Way', 
|              date=datetime.datetime.now(),
|              category='Django')
|          Post.objects.create(id=2, 
|              title='Python`s Hardest Problem', 
|              date=datetime.datetime.now(),
|              category='Python')
|  
|      def test_posts_have_category(self):
|          """Animals that can speak are correctly identified"""
|          first_post = Post.objects.get(id=1)
|          second_post = Post.objects.get(id=2)
|          self.assertEqual(first_post.category, 'Django')
|          self.assertEqual(second_post.category, 'Python')


That's it! You're ready to start your actual development. Now is when the real fun begins. Just remember: commit often, test everything, and don't write code where you serve it from. Regardless of what happens from here on out, you've definitely started a Django 1.6 project the right way!

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
NOTE1: Creating the Django Admin User ( you can create multiple ones )
#> python manage.py createsuperuser

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------




######################################################################################
## Other installed packages
######################################################################################

A. User authentication library :  django-allauth
#> pip install django-allauth



######################################################################################
## Removing Migrations
######################################################################################

######################################################################################
1. Remove migrations and Database
######################################################################################
  A. Remove all migrations files within your project:
  
  . Go through each of your projects apps migration folder and remove everything inside, except the __init__.py file.
  . Or if you are using a unix-like OS you can run the following script (inside your project dir):
    #> find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
    #> find . -path "*/migrations/*.pyc"  -delete
  B. Drop the current database, or delete the db.sqlite3 if it is your case.
  
  C. Create the initial migrations and generate the database schema:
  
    #> python manage.py makemigrations
    #> python manage.py migrate
  And you are good to go.


######################################################################################
2. Remove Migrations but keep database?
######################################################################################

  A. Make sure your models fits the current database schema
     The easiest way to do it is trying to create new migrations:
  
    #> python manage.py makemigrations

   >If there are any pending migration, apply them first.
  
  If you see the message:
  "No changes detected" then you are good to go.


  B. Clear the migration history for each app
    Now you will need to clear the migration history app by app.

    . First run the showmigrations command so we can keep track of what is going on:

	#> python manage.py showmigrations

    > you should see your apps migrations, selected with an X

    . Clear the migration history:

    #> python manage.py migrate --fake <app_name1> zero
    #> python manage.py migrate --fake <app_name2> zero

    . Now, run the command showmigrations: you should see the migrations for app unselected

    #> python manage.py showmigrations

  C. Remove the actual migration files: 
    . Go through each of your projects apps migration folder and remove everything inside, except the __init__.py file.
    . Or if you are using a unix-like OS you can run the following script (inside your project dir):
      #> find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
      #> find . -path "*/migrations/*.pyc"  -delete

  D. Run the showmigrations again:
    #> python manage.py showmigrations

  > you should now see no migrations in your app
   
  E. Create the initial migrations
    #> python manage.py makemigrations
  > You should see the creation of Models and 0001_initial.py

  F. Fake the initial migration
  > In this case you wonâ€™t be able to apply the initial migration because the 
    database table already exists. What we want to do is to fake this migration instead:

  #> python manage.py migrate --fake-initial
  
  G. Finally, run showmigrations again and double check. All done.
  URL:https://simpleisbetterthancomplex.com/tutorial/2016/07/26/how-to-reset-migrations.html



######################################################################################
Other Installed Packages
----------------------------------------------------------------

A. Romkan : Romanji converter, convert katakana/hiragana to romanji

	#>  pip install romkan

	#> git clone git://github.com/soimort/python-romkan.git
	#> python setup.py install

B. RestAPI: 
	#> pip install djangorestframework
	#> pip install markdown       # Markdown support for the browsable API.
	#> pip install django-filter  # Filtering support

######################################################################################
